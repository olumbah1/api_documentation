import os
import io
import random
from datetime import datetime, timezone
import requests
from django.conf import settings
from PIL import Image, ImageDraw, ImageFont

COUNTRIES_API = os.getenv('EXTERNAL_COUNTRIES_API', settings.EXTERNAL_COUNTRIES_API)
EXCHANGE_API = os.getenv('EXTERNAL_EXCHANGE_API', settings.EXTERNAL_EXCHANGE_API)
SUMMARY_IMAGE_PATH = os.getenv('SUMMARY_IMAGE_PATH', settings.SUMMARY_IMAGE_PATH)

def fetch_countries():
    try:
        resp = requests.get(COUNTRIES_API, timeout=15)
        resp.raise_for_status()
        return resp.json()
    except Exception as e:
        raise RuntimeError(f"Could not fetch data from Countries API: {e}")

def fetch_exchange_rates():
    try:
        resp = requests.get(EXCHANGE_API, timeout=15)
        resp.raise_for_status()
        data = resp.json()
        # Expecting data['rates'] mapping currency code -> rate
        rates = data.get('rates') or {}
        return rates
    except Exception as e:
        raise RuntimeError(f"Could not fetch data from Exchange API: {e}")

def compute_estimated_gdp(population, exchange_rate):
    """
    population × random(1000–2000) ÷ exchange_rate
    If exchange_rate is None -> return None (per spec)
    If currency missing/exchange skipped -> return 0 (per spec) -- handled by caller
    """
    if exchange_rate is None:
        return None
    multiplier = random.uniform(1000, 2000)
    # safe math
    try:
        return (population * multiplier) / exchange_rate
    except Exception:
        return None

def generate_summary_image(total, top5, timestamp, out_path=SUMMARY_IMAGE_PATH):
    """
    Creates a simple PNG summary and saves to out_path.
    """
    # image settings
    width, height = 1200, 630
    background = (255, 255, 255)
    title_color = (10, 10, 10)
    text_color = (30, 30, 30)

    img = Image.new('RGB', (width, height), color=background)
    draw = ImageDraw.Draw(img)

    # fonts: use default Pillow font (portable)
    try:
        font_title = ImageFont.truetype("DejaVuSans-Bold.ttf", 40)
        font_sub = ImageFont.truetype("DejaVuSans.ttf", 20)
    except:
        font_title = ImageFont.load_default()
        font_sub = ImageFont.load_default()

    draw.text((40, 40), "Country Exchange Summary", fill=title_color, font=font_title)
    draw.text((40, 100), f"Total countries: {total}", fill=text_color, font=font_sub)
    draw.text((40, 130), f"Last refreshed: {timestamp.isoformat()}", fill=text_color, font=font_sub)

    draw.text((40, 180), "Top 5 by estimated GDP", fill=text_color, font=font_sub)
    y = 220
    for i, c in enumerate(top5, start=1):
        gdp_display = "N/A" if c['estimated_gdp'] is None else f"{c['estimated_gdp']:.2f}"
        line = f"{i}. {c['name']} — {gdp_display}"
        draw.text((60, y), line, fill=text_color, font=font_sub)
        y += 30

    draw.text((40, height - 40), "Generated by Country Exchange API", fill=text_color, font=font_sub)

    # ensure directory exists
    os.makedirs(os.path.dirname(out_path), exist_ok=True)
    img.save(out_path)
    return out_path
